"""
This script take all the Markdown file inside the folder "posts" and create the corresponding Svelte files.
SvelteKit than will build the corresponding HTML pages. Doing this way allow to have faster response when visiting posts pages.
This allow also to reduce the number of JS libraries needed, by the client, that is Marked.js in this case.
"""
import os
import subprocess
import json
import datetime


PAGE_TEMPLATE = '''<!-- Svelte page auto generated by "gen-posts.py" -->
<title>{title} | Oscar Urselli</title>

<h2 class="ibm-plex-mono-semibold">{title}</h2>
<p class="ibm-plex-mono-regular">{description}</p>
<div class="ibm-plex-mono-regular">{body}</div>

<div class="d-flex justify-content-between">
    {{#if {index} > 0}}
        <a href="/posts/{prev_post}" class="btn btn-outline-secondary ibm-plex-mono-regular rounded-0">&lt&lt&lt Previous</a>
    {{/if}}
    {{#if {index} < {len_posts} - 1}}
        <a href="/posts/{next_post}" class="ms-auto btn btn-outline-secondary ibm-plex-mono-regular rounded-0">Next &gt;&gt;&gt;</a>
    {{/if}}
</div>        
'''

posts = []

for p in os.listdir("./posts"):
    with open(f"./posts/{p}", "r") as f:
        try:
            title = f.readline().split("title ")[1].strip("\n")
            date = f.readline().split("date ")[1].strip("\n")
            date_ts = datetime.datetime.strptime(date, "%Y-%m-%d").replace(tzinfo=datetime.timezone.utc).timestamp()
            description = f.readline().split("description ")[1].strip("\n")

            f.readline()

            body = f.read()

            with open("./temp.md", "w") as temp:
                temp.write(body)

            proc = subprocess.run(["npx", "marked", "./temp.md"], capture_output = True)
            if proc.returncode == 0:
                posts.append({
                    "filename": p.split(".")[0],
                    "title": title,
                    "date": date,
                    "description": description,
                    "date_ts": date_ts,
                    "body": proc.stdout.decode()
                })
            else:
                print(proc.stderr)
        except IndexError:
            print(f"{p} isn't properly formatted.")

posts.sort(key = lambda x: x["date_ts"])

for index, post in enumerate(posts):
    try:
        os.listdir("./src/routes/posts").index(post["filename"])
    except ValueError:
        os.mkdir(f"./src/routes/posts/{post["filename"]}")
    
    with open(f"./src/routes/posts/{post["filename"]}/+page.svelte", "w") as f:
        f.write(PAGE_TEMPLATE.format(
            title = post["title"],
            description = post["description"],
            body = post["body"],
            index = index,
            len_posts = len(posts),
            prev_post = posts[index - 1]["filename"] if index > 0 else None,
            next_post = posts[index + 1]["filename"] if index < len(posts) - 1 else None
        ))


posts_list = [{
    "title": p["title"],
    "date": p["date"],
    "description": p["description"],
    "filename": p["filename"]
} for p in posts ]

with open("./src/lib/posts.json", "w") as f:
    f.write(json.dumps(posts_list))